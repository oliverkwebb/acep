#!/usr/bin/gawk -f
BEGIN {FS = ",";}
function Token_gen(colm){
	delete Var_array; delete Syn_array;
	RST_Ind++
	split(colm,Var_array,/[^A-Za-z0-9\$\.""\s]/,Syn_array)
	index_VA=0; index_SA=0
	for(k=0;k<=length(Var_array)+length(Syn_array);k++){
		if(k%2==0){
			Ret_Str[RST_Ind][k]=Var_array[index_VA]
			index_VA=(index_VA+1)%length(Var_array)}
		else{
			Ret_Str[RST_Ind][k]=Syn_array[index_SA]
			index_SA=(index_SA+1)%length(Syn_array)}
	}
	delete Var_array; delete Syn_array;
	return RST_Ind
}

function Is_Symbol(Symbol_Name){if(Symbol_Name ~ /^[A-Z_-]+:?/) return 1; else return 0}
function Det_Type(Sym_Str){
	switch(Sym_Str){
		case /^=$/: return "EQN_BEGIN"; break
		case /^".*"$/: return "STRING:"Sym_Str; break
		case /^-*[0-9]+\.*[0-9]*$/: return "NUMBER"":"Sym_Str; break
		case /^\$[0-9]+$/: return "LOCAL_REF:" Sym_Str; break
		case /^[A-Za-z]+$/: return "FUNCT"":"Sym_Str; break
		case /^\($/: return "CALL_BEGIN"; break
		case /^\)$/: return "CALL_END"; break
		case /^$/: return "BLANK"; break;
		case /^[-\+\*\/\^]+/: return "BINOP"":"Sym_Str; break
		case /^[A-Z_-]+:?/: return "SYMBOL:"Sym_Str;break;
		default: return "U_SYMBOL:"Sym_Str; break
	}
}

function ResVar(AST_Symbol){
	Resolve_Flag=0
	switch(AST_Symbol){
		case /^LOCAL_REF/: Resolve_Flag = 1; break;
		default: Resolve_Flag = 0; break;
	}
	while(1){
		if(Resolve_Flag==0){Res_Symbol=AST_Symbol; break;}
		else if(Resolve_Flag==1){
			#split(AST_Symbol,TMP_array,/\$/)
			sub(/^.*\$/,"",AST_Symbol)
			Res_Symbol=Eval($AST_Symbol)
			Resolve_Flag=0
			break;
		}
	}
	return Res_Symbol;
}

function AST_Gen(Tree_Index){
	Ret_AST_Index++
	Ret_AST_SubIndex=0
	for(symbol in Ret_Str[Tree_Index]){
		AST_GEN_TMP=Det_Type(Ret_Str[Tree_Index][symbol])
		if(AST_GEN_TMP != "BLANK"){
			AST_Tree[Ret_AST_Index][Ret_AST_SubIndex]=AST_GEN_TMP
			Ret_AST_SubIndex++
		}
	}
	#for(g in AST_Tree[Ret_AST_Index]) {print AST_Tree[Ret_AST_Index][g]j ", "}
	delete Ret_Str[Tree_Index]
	return Ret_AST_Index
}

function AST_Solve(AST_PTR){
	#Variable Subsitution
	for(statement in AST_Tree[AST_PTR]){
		CP_Symbol=AST_Tree[AST_PTR][statement];
		if(CP_Symbol ~ /^LOCAL_REF/) AST_Tree[AST_PTR][statement]=ResVar(CP_Symbol); 
	}
	#Binary Operators
	NEXT_OP=0
	NEXT_OP=Preeceedence_Gen(AST_PTR)
	while(NEXT_OP != 0 ){
		SHIFT_CONST=0; PIVOT=0
		SHIFT_CONST=BINOP_DET_SC(AST_PTR,NEXT_OP)
		SHIFT_WIDTH=2
		switch(SHIFT_CONST){
			case 0:PIVOT=NEXT_OP;break;
			case 1:PIVOT=NEXT_OP+1;SHIFT_WIDTH=1;break;
			case 16: PIVOT=NEXT_OP; SHIFT_WIDTH=3;break;
			case 2: ;break;
			case 3: ;break;
		}
		AST_Tree[AST_PTR][PIVOT-1]=Det_Type(BINOP_SOLVE(AST_PTR,NEXT_OP))
		Array_Right_Shift(AST_Tree[AST_PTR],PIVOT,SHIFT_WIDTH)
		#for(w in AST_Tree[AST_PTR]) printf AST_Tree[AST_PTR][w] FS; printf "\n"
		NEXT_OP=Preeceedence_Gen(AST_PTR)
	}
	if(AST_PTR != 1) sub("^.*:","", AST_Tree[AST_PTR][1])
	return AST_Tree[AST_PTR][1]
}

function Preeceedence_Gen(AST_pointer){
	#Operater Preforming
	for(statement in AST_Tree[AST_pointer]){
		if (AST_Tree[AST_pointer][statement] ~ /^CALL_BEGIN/ )return statement}
	for(statement in AST_Tree[AST_pointer]){
		if (AST_Tree[AST_pointer][statement] ~ /(OP:\^)/ )return statement}
	for(statement in AST_Tree[AST_pointer]){
		if (AST_Tree[AST_pointer][statement] ~ /(OP:-|\+)/ )return statement}
	for(statement in AST_Tree[AST_pointer]){
		if (AST_Tree[AST_pointer][statement] ~ /:\*/)return statement}
	for(statement in AST_Tree[AST_pointer]){
		if (AST_Tree[AST_pointer][statement] ~ /:\//)return statement}
	return 0
}
	

function BINOP_SOLVE(BINOP_Tree,BINOP_Ind){
	BINOP_OP=AST_Tree[BINOP_Tree][BINOP_Ind]
	BINOP_LEFT=AST_Tree[BINOP_Tree][BINOP_Ind-1]
	BINOP_RIGHT=AST_Tree[BINOP_Tree][BINOP_Ind+1]
	BIN_SC=0
	switch(BINOP_LEFT){
		case /NUMBER/: sub("^.*:","",BINOP_LEFT) ;break;
		case /^STRING/: sub("^.*:","",BINOP_LEFT) ;break;
		case /^CALL/: ;break;
		default: BINOP_LEFT = 0; BIN_SC++ ;break;
		}
	switch(BINOP_RIGHT){
		case /NUMBER/: sub("^.*:","",BINOP_RIGHT) ;break;
		case /^STRING/: sub("^.*:","",BINOP_RIGHT) ;break;
		default: BINOP_RIGHT = 0; BIN_SC=BIN_SC+2;break;
		}
	switch(BINOP_OP){
		case /^CALL/: return FR_EVAL(BINOP_Tree,BINOP_Ind) ;break;
		case /\^/ :return BINOP_LEFT**BINOP_RIGHT;break;
		case /\+/ :return BINOP_LEFT+BINOP_RIGHT;break;
		case /-/ :return BINOP_LEFT-BINOP_RIGHT;break;
		case /\*/ :return BINOP_LEFT*BINOP_RIGHT;break;
		case /\// :return BINOP_LEFT/BINOP_RIGHT;break;
	}
}

function BINOP_DET_SC(BINOP_Tree,BINOP_Ind){
	BINOP_OP=AST_Tree[BINOP_Tree][BINOP_Ind]
	BINOP_LEFT=AST_Tree[BINOP_Tree][BINOP_Ind-1]
	BINOP_RIGHT=AST_Tree[BINOP_Tree][BINOP_Ind+1]
	BIN_SC=0
	if(BINOP_OP ~ /^CALL/){return 16;}
	#print BINOP_LEFT FS BINOP_OP FS BINOP_RIGHT FS
	switch(BINOP_LEFT){
		case /NUMBER/: ;break;
		case /^STRING/:;break;
		case /^FUNCT/: ;break;
		case /^U_/:print "U_SYMBOLS"; exit(64);break;
		default: BIN_SC++ ;break;
		}
	switch(BINOP_RIGHT){
		case /NUMBER/: ;break;
		case /^STRING/:;break;
		case /^FUNCT/: ;break;
		case /^U_/:print "U_SYMBOLS"; exit(64);break;
		default: BIN_SC=BIN_SC+2;break;
	}
	return BIN_SC
}


function FR_EVAL(FN_TREE,FN_PTR){
	FN_NAME=AST_Tree[FN_TREE][FN_PTR-1]
	FN_ARG=AST_Tree[FN_TREE][FN_PTR+1]
	sub(/^.*:/,"",FN_NAME)
	switch(FN_NAME){
		case "echo": return echo(FN_ARG)	;break;
		case "eval": return Eval(FN_ARG)	;break;
		case "bc"  : return FR_BC(FN_ARG)	;break;
	}
	return 0
}
function FR_BC(BC_EXPRESSION){
	cmd="echo "BC_EXPRESSION" | bc -l"
	cmd | getline bc_retval
	close(cmd)
	return bc_retval
}
function echo(ECHO_ARGV){
	return sprintf(ECHO_ARGV)
}

function Array_Right_Shift(Array_In,Arr_StartPoint, Arr_Shift){
	ARS_Len=length(Array_In)
	for(c=Arr_StartPoint;c<=ARS_Len;c++){
		Array_In[c]=Array_In[c+Arr_Shift]
		delete Array_In[c+Arr_Shift]
	}
}

function Eval(cell){
	eval_counter++; if(eval_counter>32768){print "MAX_RECURSION";exit(-1)}
	if(cell ~ /^=/){ cell = AST_Solve(AST_Gen(Token_gen(cell))); return cell}
	else return cell
}

{
	for(i=1;i<=NF;i++){
		RST_Ind=0; Ret_AST_Index=0; ArrShift_Index=0; eval_counter=0;
		$i=Eval($i)
		#Garbage Collecting
		delete AST_Tree;
		j=$i
		sub(/^.*:/,"",j)
		printf j FS
		j=""
	}
	printf "\n"
}
